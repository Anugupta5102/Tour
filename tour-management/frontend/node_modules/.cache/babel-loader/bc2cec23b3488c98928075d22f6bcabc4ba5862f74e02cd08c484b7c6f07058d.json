{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\MernStack-Tour-Management\\\\tour-management\\\\frontend\\\\src\\\\components\\\\payment\\\\PaymentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Alert, Button } from 'reactstrap';\nimport { createPaymentIntent, confirmPayment } from '../../services/api';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\nconst PaymentForm = _ref => {\n  _s();\n  let {\n    booking\n  } = _ref;\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [clientSecret, setClientSecret] = useState('');\n  useEffect(() => {\n    const initializePayment = async () => {\n      elements;\n      try {\n        const response = await createPaymentIntent(booking.totalAmount);\n        setClientSecret(response.data.clientSecret);\n      } catch (err) {\n        setError('Failed to initialize payment');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializePayment();\n  }, [booking.totalAmount]);\n  const handlePayment = async () => {\n    try {\n      setLoading(true);\n      const stripe = await stripePromise;\n      const {\n        paymentIntent,\n        error\n      } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement('card'),\n          billing_details: {\n            name: booking.userId.name\n          }\n        }\n      });\n      if (error) {\n        setError(error.message);\n        return;\n      }\n      if (paymentIntent.status === 'succeeded') {\n        await confirmPayment(booking._id, paymentIntent.id);\n        navigate('/bookings', {\n          state: {\n            success: true,\n            message: 'Payment successful!'\n          }\n        });\n      }\n    } catch (err) {\n      setError('Payment failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Alert, {\n    color: \"danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-form p-4 bg-light rounded shadow-sm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"mb-4\",\n      children: \"Payment Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"card-element\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      size: \"lg\",\n      block: true,\n      onClick: handlePayment,\n      disabled: loading,\n      children: loading ? 'Processing...' : 'Pay Now'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentForm, \"jNU2gyLJh46iXFK/26xnYCHY65w=\", false, function () {\n  return [useNavigate];\n});\n_c = PaymentForm;\nexport default PaymentForm;\nvar _c;\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","loadStripe","Alert","Button","createPaymentIntent","confirmPayment","LoadingSpinner","jsxDEV","_jsxDEV","stripePromise","process","env","REACT_APP_STRIPE_PUBLIC_KEY","PaymentForm","_ref","_s","booking","navigate","loading","setLoading","error","setError","clientSecret","setClientSecret","initializePayment","elements","response","totalAmount","data","err","handlePayment","stripe","paymentIntent","confirmCardPayment","payment_method","card","getElement","billing_details","name","userId","message","status","_id","id","state","success","fileName","_jsxFileName","lineNumber","columnNumber","color","children","className","size","block","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/MernStack-Tour-Management/tour-management/frontend/src/components/payment/PaymentForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Alert, Button } from 'reactstrap';\nimport { createPaymentIntent, confirmPayment } from '../../services/api';\nimport LoadingSpinner from '../common/LoadingSpinner';\n\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);\n\nconst PaymentForm = ({ booking }) => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [clientSecret, setClientSecret] = useState('');\n\n  useEffect(() => {\n    const initializePayment = async () => { elements\n      try {\n        const response = await createPaymentIntent(booking.totalAmount);\n        setClientSecret(response.data.clientSecret);\n      } catch (err) {\n        setError('Failed to initialize payment');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializePayment();\n  }, [booking.totalAmount]);\n\n  const handlePayment = async () => {\n    try {\n      setLoading(true);\n      const stripe = await stripePromise;\n      \n      const { paymentIntent, error } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement('card'),\n          billing_details: {\n            name: booking.userId.name,\n          },\n        },\n      });\n\n      if (error) {\n        setError(error.message);\n        return;\n      }\n\n      if (paymentIntent.status === 'succeeded') {\n        await confirmPayment(booking._id, paymentIntent.id);\n        navigate('/bookings', { \n          state: { success: true, message: 'Payment successful!' }\n        });\n      }\n    } catch (err) {\n      setError('Payment failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <Alert color=\"danger\">{error}</Alert>;\n\n  return (\n    <div className=\"payment-form p-4 bg-light rounded shadow-sm\">\n      <h4 className=\"mb-4\">Payment Details</h4>\n      <div className=\"mb-4\">\n        <div id=\"card-element\">\n          {/* Stripe Card Element will be inserted here */}\n        </div>\n      </div>\n      <Button\n        color=\"primary\"\n        size=\"lg\"\n        block\n        onClick={handlePayment}\n        disabled={loading}\n      >\n        {loading ? 'Processing...' : 'Pay Now'}\n      </Button>\n    </div>\n  );\n};\n\nexport default PaymentForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}